{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Installation pip install plotnineseqsuite Load sample data from plotnineseqsuite.data import seqs_dna, seqs_aa ,pfms_dna This loads three sample data sets: seqs_dna : dict of binding sites for 12 transcription factors obtained from FASTA files in JASPAR . The keys represent the JASPAR ID. pfms_dna : dict of position frequency matrices for four transcription factors obtained from JASPAR . The keys names represent the JASPAR ID. seqs_aa : dict of kinase-substrate phosphorylation sites obtained from Wagih et al. The keys represent the names of the kinases associated with the phosphosites. Visualizing aligned sequences Plot an aligned sequences You can draw an aligned sequences using ggplot function, with geom_alignedSeq. Let\u2019s try this on sequences for one of the transcription factors from JASPAR: from plotnine import ggplot, coord_fixed from plotnineseqsuite.align import geom_alignedSeq from plotnineseqsuite.theme import theme_seq ggplot() + geom_alignedSeq(seqs_dna['MA0013.1']) + theme_seq() + coord_fixed() Accepted input formats geom_alignedSeq accepts two types of input, each described in detail below list: a list of aligned sequences dict: It is used for plotting more than one sequence logo at the same time with the help of facets, the key of dict is facet value, and the value of dict is list described above No background color When col_scheme option is None, the picture has no background color. ggplot() + geom_alignedSeq(seqs_dna['MA0013.1'], no_scheme_col='black', col_scheme=None) + theme_seq() + coord_fixed() No sequence letter When font option is None and border_col is None, the picture has only the background color. ggplot() + geom_alignedSeq(seqs_dna['MA0013.1'], font=None, border_col=None) + theme_seq() + coord_fixed() The color scheme switches to letters When the option scheme_applied is LETTER, the color scheme will be applied from the background to the letters. ggplot() + geom_alignedSeq(seqs_dna['MA0013.1'], no_scheme_col='white', scheme_applied='LETTER') + theme_seq() + coord_fixed() Tagging sequences You can set seq_names parameter to identify the name of the sequence. names=['seq-a', 'seq-b', 'seq-c', 'seq-d', 'seq-e', 'seq-f'] ggplot() + geom_alignedSeq(seqs_dna['MA0013.1'], seq_names=names) + theme_seq() + coord_fixed() Visualizing sequence logo Plot a sequence logo You can draw a sequence logos using ggplot function, with geom_logo. Let\u2019s try this on sequences for one of the transcription factors from JASPAR: from plotnine import ggplot from plotnineseqsuite.logo import geom_logo from plotnineseqsuite.theme import theme_seq ggplot() + geom_logo(seqs_dna['MA0001.1']) + theme_seq() Accepted input formats geom_logo accepts three types of input, each described in detail below list: a list of aligned sequences numpy.ndarray: a position frequency matrix, where the row is the letter, and column is the position. Note: The order of the rows corresponds to the NAMESPACE one by one. dict: It is used for plotting more than one sequence logo at the same time with the help of facets, the key of dict is facet value, and the value of dict is list or numpy.ndarray described above The following generates a sequence logo using a position frequency matrix from the sample data ggplot() + geom_logo(pfms_dna['MA0018.2'],seq_type='DNA') + theme_seq() Plotting methods geom_logo supports two sequence logo methods through the method options: \u2018bits\u2019 and \u2018probability\u2019. By default, the bits is used. ggplot() + geom_logo( seqs_dna['MA0001.1'], method = 'bits' ) + theme_seq() ggplot() + geom_logo( seqs_dna['MA0001.1'], method = 'probability' ) + theme_seq() Custom-height logos If you have your own height metric for each letter, simply create a matrix where each cell is a the desired height, and set the method to custom. You can even have negative heights. Here\u2019s a simple example: import numpy as np custom_mat = np.random.randn(4,5) ggplot() + geom_logo(custom_mat, method='custom', seq_type='DNA') + theme_seq() Visualizing sequence histogram Plot a sequence histogram You can draw a conservation bar of aligned sequences using ggplot function, with geom_seqBar. Let\u2019s try this on sequences for one of the transcription factors from JASPAR: from plotnineseqsuite.bar import geom_seqBar ggplot() + geom_seqBar(seqs_dna['MA0013.1']) + theme_seq() Accepted input formats geom_seqBar accepts three types of input, each described in detail below list: a list of aligned sequences numpy.ndarray: a position frequency matrix, where the row is the letter, and column is the position. Note: The order of the rows corresponds to the NAMESPACE one by one. dict: It is used for plotting more than one sequence histogram at the same time with the help of facets, the key of dict is facet value, and the value of dict is list or numpy.ndarray described above The following generates a sequence histogram using a position frequency matrix from the sample data ggplot() + geom_seqBar(pfms_dna['MA0018.2'],seq_type='DNA') + theme_seq() No sequence letter When font option is None, the picture has only the bar. ggplot() + geom_seqBar(seqs_dna['MA0013.1'], font=None) + theme_seq() Sequence types Preset alphabets Amino acids, DNA and RNA sequence types are all supported by geom_logo, geom_seqBar and geom_alignedSeq. By default, plotnineSeqSuite will try to guess your sequence type. You can explicitly set the sequence type through the seq_type option. Lets try generate an amino acid sequence logo using kinase-substrate phosphorylation data: ggplot() + geom_logo( seqs_aa['AKT1'], seq_type = 'AA' ) + theme_seq() Custom alphabet If you want to define a custom alphabet you can do so by setting namespace with your desired custom alphabet. For example, lets say you wanted a sequence logo of zeros and ones: from plotnine.guides import guides seqs_numeric = list(map(lambda x: x.replace('A','1').replace('T','2').replace('G','3').replace('C','4'), seqs_dna['MA0001.1'])) ggplot() + geom_logo(seqs_numeric, method='probability', namespace=['1','2','3','4']) + theme_seq()+guides(fill=False) Greek letters are also supported: seqs_numeric = list(map(lambda x: x.replace('A','\u03b4').replace('T','\u03b5').replace('G','\u03c8').replace('C','\u03bb'), seqs_dna['MA0001.1'])) ggplot() + geom_logo(seqs_numeric, method='probability', namespace=['\u03b4','\u03b5','\u03c8','\u03bb']) + theme_seq()+guides(fill=False) Colour schemes Preset color schemes plotnineSeqSuite has preset color schemes that can be set using the col_scheme parameter in geom_logo, the parameter bar_col_scheme in geom_seqBar and the parameter col_scheme in geom_alignedSeq. By default, the col_scheme is set to AUTO such that the color scheme is automatically chosen based on your sequence type. Lets try generate an amino acid sequence logo using kinase-substrate phosphorylation data: ggplot() + geom_logo(seqs_dna['MA0001.1'], col_scheme='base_pairing') + theme_seq() Custom color schemes If the presets are not enough for you, you can define custom discrete or continuous color schemes using the col_schemes.make_col_scheme function. Here are two examples of discrete and continuous color schemes. Discrete color schemes from plotnineseqsuite.col_schemes import make_col_scheme cs1 = make_col_scheme(chars=['A', 'T', 'C', 'G'], groups=['gr1', 'gr1', 'gr2', 'gr2'],cols=['purple', 'purple', 'blue', 'blue']) ggplot() + geom_logo(seqs_dna['MA0001.1'], col_scheme=cs1) + theme_seq() Continuous color schemes cs2 = make_col_scheme(chars=['A', 'T', 'C', 'G'], values=[1,2,3,4]) ggplot() + geom_logo(seqs_dna['MA0001.1'], col_scheme=cs2) + theme_seq() Multiple grouped sequences You can plot more than one grouped sequences at the same time with the help of facets. plotnineSeqSuite will accept a dict. The keys of the dict will be used as the facet titles. Take geom_logo for example. from plotnine import facet_wrap ggplot() + geom_logo(seqs_dna)+ theme_seq()+facet_wrap('~seq_group', ncol=4, scales='free_x') Fonts You can adjust the font of letters by setting the font parameter. To list all the available color schemes use the font.list_fonts function. Take geom_logo for example. from plotnine import ggtitle import patchworklib as pw from plotnineseqsuite.font import list_fonts fonts = list_fonts() for i in range(0,12,3): g1 = pw.load_ggplot(ggplot() + geom_logo(data=seqs_dna['MA0001.1'], font=fonts[i]) + theme_seq()+ggtitle(fonts[i])) g2 = pw.load_ggplot(ggplot() + geom_logo(data=seqs_dna['MA0001.1'], font=fonts[i+1]) + theme_seq() + ggtitle(fonts[i+1])) g3 = pw.load_ggplot(ggplot() + geom_logo(data=seqs_dna['MA0001.1'], font=fonts[i+2]) + theme_seq() + ggtitle(fonts[i+2])) if i == 0: allgg = g1|g2|g3 else: temp = g1|g2|g3 allgg = temp/allgg allgg.savefig() Advanced plotnineSeqSuite plotnineSeqSuite is based on object-oriented design. The *_data property of class geom_logo and geom_seqBar, geom_alignedSeq is a core feature. Combining plots Without using any packages like patchwork and cowplot, plotnineSeqSuite can easily plot geom_logo and geom_seqBar, geom_alignedSeq in one figure. I\u2019ll demonstrate with an example plotting probability sequence logo, aligned sequences and sequence histogram in one figure via changed *_data property. from plotnine import scale_y_continuous names = ['seq-a', 'seq-b', 'seq-c', 'seq-d', 'seq-e', 'seq-f'] seqs = geom_alignedSeq(seqs_dna['MA0013.1'], seq_names=names) logo = geom_logo(seqs_dna['MA0013.1'], method='probability') logo.data['y'] = logo.data['y']+6.1 bar = geom_seqBar(seqs_dna['MA0013.1'], font=None) bar.bar_data['y'] = bar.bar_data['y'] - 6.1 ggplot() + logo + bar + seqs + theme_seq() + scale_y_continuous(breaks=lambda x: [k + 0.5 for k in range(0, len(names))], labels=names) Modify the starting position When the input sequence fragment does not start at 1, you can modify the x value of the property to display the correct starting position. names = ['seq-a', 'seq-b', 'seq-c', 'seq-d', 'seq-e', 'seq-f'] seqs = geom_alignedSeq(seqs_dna['MA0013.1'], seq_names=names) seqs.bg_data['x'] = seqs.bg_data['x']+3333 seqs.letter_data['x'] = seqs.letter_data['x']+3333 ggplot() + seqs + theme_seq() Used concurrently with other functions of plotnine. Because plotnineSeqSuite is an extension of plotnine, functions of plotnine can be used without obstacles. Here is an example of drawing rectangles, lines and text. from plotnine.geoms import annotate ggplot() + geom_alignedSeq(seqs_dna['MA0013.1']) + annotate('rect', xmin=0.5, xmax=3.5, ymin=-0.05, ymax=6.1,alpha=.1, color='black') + theme_seq() ggplot() + geom_seqBar(seqs_dna['MA0013.1']) + annotate('segment', x=1.5, xend=2.5, y=0, yend=0, size=2, color='red') + annotate('segment', x=4.5, xend=7.5, y=0, yend=0, size=2, color='red') + annotate('segment', x=8.5, xend=11.5, y=0, yend=0,size=2, color='red') + annotate('text', x=6, y=-0.2,label='A is the most', color='red') + theme_seq()","title":"Getting Started"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#installation","text":"pip install plotnineseqsuite","title":"Installation"},{"location":"#load-sample-data","text":"from plotnineseqsuite.data import seqs_dna, seqs_aa ,pfms_dna This loads three sample data sets: seqs_dna : dict of binding sites for 12 transcription factors obtained from FASTA files in JASPAR . The keys represent the JASPAR ID. pfms_dna : dict of position frequency matrices for four transcription factors obtained from JASPAR . The keys names represent the JASPAR ID. seqs_aa : dict of kinase-substrate phosphorylation sites obtained from Wagih et al. The keys represent the names of the kinases associated with the phosphosites.","title":"Load sample data"},{"location":"#visualizing-aligned-sequences","text":"","title":"Visualizing aligned sequences"},{"location":"#plot-an-aligned-sequences","text":"You can draw an aligned sequences using ggplot function, with geom_alignedSeq. Let\u2019s try this on sequences for one of the transcription factors from JASPAR: from plotnine import ggplot, coord_fixed from plotnineseqsuite.align import geom_alignedSeq from plotnineseqsuite.theme import theme_seq ggplot() + geom_alignedSeq(seqs_dna['MA0013.1']) + theme_seq() + coord_fixed()","title":"Plot an aligned sequences"},{"location":"#accepted-input-formats","text":"geom_alignedSeq accepts two types of input, each described in detail below list: a list of aligned sequences dict: It is used for plotting more than one sequence logo at the same time with the help of facets, the key of dict is facet value, and the value of dict is list described above","title":"Accepted input formats"},{"location":"#no-background-color","text":"When col_scheme option is None, the picture has no background color. ggplot() + geom_alignedSeq(seqs_dna['MA0013.1'], no_scheme_col='black', col_scheme=None) + theme_seq() + coord_fixed()","title":"No background color"},{"location":"#no-sequence-letter","text":"When font option is None and border_col is None, the picture has only the background color. ggplot() + geom_alignedSeq(seqs_dna['MA0013.1'], font=None, border_col=None) + theme_seq() + coord_fixed()","title":"No sequence letter"},{"location":"#the-color-scheme-switches-to-letters","text":"When the option scheme_applied is LETTER, the color scheme will be applied from the background to the letters. ggplot() + geom_alignedSeq(seqs_dna['MA0013.1'], no_scheme_col='white', scheme_applied='LETTER') + theme_seq() + coord_fixed()","title":"The color scheme switches to letters"},{"location":"#tagging-sequences","text":"You can set seq_names parameter to identify the name of the sequence. names=['seq-a', 'seq-b', 'seq-c', 'seq-d', 'seq-e', 'seq-f'] ggplot() + geom_alignedSeq(seqs_dna['MA0013.1'], seq_names=names) + theme_seq() + coord_fixed()","title":"Tagging sequences"},{"location":"#visualizing-sequence-logo","text":"","title":"Visualizing sequence logo"},{"location":"#plot-a-sequence-logo","text":"You can draw a sequence logos using ggplot function, with geom_logo. Let\u2019s try this on sequences for one of the transcription factors from JASPAR: from plotnine import ggplot from plotnineseqsuite.logo import geom_logo from plotnineseqsuite.theme import theme_seq ggplot() + geom_logo(seqs_dna['MA0001.1']) + theme_seq()","title":"Plot a sequence logo"},{"location":"#accepted-input-formats_1","text":"geom_logo accepts three types of input, each described in detail below list: a list of aligned sequences numpy.ndarray: a position frequency matrix, where the row is the letter, and column is the position. Note: The order of the rows corresponds to the NAMESPACE one by one. dict: It is used for plotting more than one sequence logo at the same time with the help of facets, the key of dict is facet value, and the value of dict is list or numpy.ndarray described above The following generates a sequence logo using a position frequency matrix from the sample data ggplot() + geom_logo(pfms_dna['MA0018.2'],seq_type='DNA') + theme_seq()","title":"Accepted input formats"},{"location":"#plotting-methods","text":"geom_logo supports two sequence logo methods through the method options: \u2018bits\u2019 and \u2018probability\u2019. By default, the bits is used. ggplot() + geom_logo( seqs_dna['MA0001.1'], method = 'bits' ) + theme_seq() ggplot() + geom_logo( seqs_dna['MA0001.1'], method = 'probability' ) + theme_seq()","title":"Plotting methods"},{"location":"#custom-height-logos","text":"If you have your own height metric for each letter, simply create a matrix where each cell is a the desired height, and set the method to custom. You can even have negative heights. Here\u2019s a simple example: import numpy as np custom_mat = np.random.randn(4,5) ggplot() + geom_logo(custom_mat, method='custom', seq_type='DNA') + theme_seq()","title":"Custom-height logos"},{"location":"#visualizing-sequence-histogram","text":"","title":"Visualizing sequence histogram"},{"location":"#plot-a-sequence-histogram","text":"You can draw a conservation bar of aligned sequences using ggplot function, with geom_seqBar. Let\u2019s try this on sequences for one of the transcription factors from JASPAR: from plotnineseqsuite.bar import geom_seqBar ggplot() + geom_seqBar(seqs_dna['MA0013.1']) + theme_seq()","title":"Plot a sequence histogram"},{"location":"#accepted-input-formats_2","text":"geom_seqBar accepts three types of input, each described in detail below list: a list of aligned sequences numpy.ndarray: a position frequency matrix, where the row is the letter, and column is the position. Note: The order of the rows corresponds to the NAMESPACE one by one. dict: It is used for plotting more than one sequence histogram at the same time with the help of facets, the key of dict is facet value, and the value of dict is list or numpy.ndarray described above The following generates a sequence histogram using a position frequency matrix from the sample data ggplot() + geom_seqBar(pfms_dna['MA0018.2'],seq_type='DNA') + theme_seq()","title":"Accepted input formats"},{"location":"#no-sequence-letter_1","text":"When font option is None, the picture has only the bar. ggplot() + geom_seqBar(seqs_dna['MA0013.1'], font=None) + theme_seq()","title":"No sequence letter"},{"location":"#sequence-types","text":"","title":"Sequence types"},{"location":"#preset-alphabets","text":"Amino acids, DNA and RNA sequence types are all supported by geom_logo, geom_seqBar and geom_alignedSeq. By default, plotnineSeqSuite will try to guess your sequence type. You can explicitly set the sequence type through the seq_type option. Lets try generate an amino acid sequence logo using kinase-substrate phosphorylation data: ggplot() + geom_logo( seqs_aa['AKT1'], seq_type = 'AA' ) + theme_seq()","title":"Preset alphabets"},{"location":"#custom-alphabet","text":"If you want to define a custom alphabet you can do so by setting namespace with your desired custom alphabet. For example, lets say you wanted a sequence logo of zeros and ones: from plotnine.guides import guides seqs_numeric = list(map(lambda x: x.replace('A','1').replace('T','2').replace('G','3').replace('C','4'), seqs_dna['MA0001.1'])) ggplot() + geom_logo(seqs_numeric, method='probability', namespace=['1','2','3','4']) + theme_seq()+guides(fill=False) Greek letters are also supported: seqs_numeric = list(map(lambda x: x.replace('A','\u03b4').replace('T','\u03b5').replace('G','\u03c8').replace('C','\u03bb'), seqs_dna['MA0001.1'])) ggplot() + geom_logo(seqs_numeric, method='probability', namespace=['\u03b4','\u03b5','\u03c8','\u03bb']) + theme_seq()+guides(fill=False)","title":"Custom alphabet"},{"location":"#colour-schemes","text":"","title":"Colour schemes"},{"location":"#preset-color-schemes","text":"plotnineSeqSuite has preset color schemes that can be set using the col_scheme parameter in geom_logo, the parameter bar_col_scheme in geom_seqBar and the parameter col_scheme in geom_alignedSeq. By default, the col_scheme is set to AUTO such that the color scheme is automatically chosen based on your sequence type. Lets try generate an amino acid sequence logo using kinase-substrate phosphorylation data: ggplot() + geom_logo(seqs_dna['MA0001.1'], col_scheme='base_pairing') + theme_seq()","title":"Preset color schemes"},{"location":"#custom-color-schemes","text":"If the presets are not enough for you, you can define custom discrete or continuous color schemes using the col_schemes.make_col_scheme function. Here are two examples of discrete and continuous color schemes.","title":"Custom color schemes"},{"location":"#discrete-color-schemes","text":"from plotnineseqsuite.col_schemes import make_col_scheme cs1 = make_col_scheme(chars=['A', 'T', 'C', 'G'], groups=['gr1', 'gr1', 'gr2', 'gr2'],cols=['purple', 'purple', 'blue', 'blue']) ggplot() + geom_logo(seqs_dna['MA0001.1'], col_scheme=cs1) + theme_seq()","title":"Discrete color schemes"},{"location":"#continuous-color-schemes","text":"cs2 = make_col_scheme(chars=['A', 'T', 'C', 'G'], values=[1,2,3,4]) ggplot() + geom_logo(seqs_dna['MA0001.1'], col_scheme=cs2) + theme_seq()","title":"Continuous color schemes"},{"location":"#multiple-grouped-sequences","text":"You can plot more than one grouped sequences at the same time with the help of facets. plotnineSeqSuite will accept a dict. The keys of the dict will be used as the facet titles. Take geom_logo for example. from plotnine import facet_wrap ggplot() + geom_logo(seqs_dna)+ theme_seq()+facet_wrap('~seq_group', ncol=4, scales='free_x')","title":"Multiple grouped sequences"},{"location":"#fonts","text":"You can adjust the font of letters by setting the font parameter. To list all the available color schemes use the font.list_fonts function. Take geom_logo for example. from plotnine import ggtitle import patchworklib as pw from plotnineseqsuite.font import list_fonts fonts = list_fonts() for i in range(0,12,3): g1 = pw.load_ggplot(ggplot() + geom_logo(data=seqs_dna['MA0001.1'], font=fonts[i]) + theme_seq()+ggtitle(fonts[i])) g2 = pw.load_ggplot(ggplot() + geom_logo(data=seqs_dna['MA0001.1'], font=fonts[i+1]) + theme_seq() + ggtitle(fonts[i+1])) g3 = pw.load_ggplot(ggplot() + geom_logo(data=seqs_dna['MA0001.1'], font=fonts[i+2]) + theme_seq() + ggtitle(fonts[i+2])) if i == 0: allgg = g1|g2|g3 else: temp = g1|g2|g3 allgg = temp/allgg allgg.savefig()","title":"Fonts"},{"location":"#advanced-plotnineseqsuite","text":"plotnineSeqSuite is based on object-oriented design. The *_data property of class geom_logo and geom_seqBar, geom_alignedSeq is a core feature.","title":"Advanced plotnineSeqSuite"},{"location":"#combining-plots","text":"Without using any packages like patchwork and cowplot, plotnineSeqSuite can easily plot geom_logo and geom_seqBar, geom_alignedSeq in one figure. I\u2019ll demonstrate with an example plotting probability sequence logo, aligned sequences and sequence histogram in one figure via changed *_data property. from plotnine import scale_y_continuous names = ['seq-a', 'seq-b', 'seq-c', 'seq-d', 'seq-e', 'seq-f'] seqs = geom_alignedSeq(seqs_dna['MA0013.1'], seq_names=names) logo = geom_logo(seqs_dna['MA0013.1'], method='probability') logo.data['y'] = logo.data['y']+6.1 bar = geom_seqBar(seqs_dna['MA0013.1'], font=None) bar.bar_data['y'] = bar.bar_data['y'] - 6.1 ggplot() + logo + bar + seqs + theme_seq() + scale_y_continuous(breaks=lambda x: [k + 0.5 for k in range(0, len(names))], labels=names)","title":"Combining plots"},{"location":"#modify-the-starting-position","text":"When the input sequence fragment does not start at 1, you can modify the x value of the property to display the correct starting position. names = ['seq-a', 'seq-b', 'seq-c', 'seq-d', 'seq-e', 'seq-f'] seqs = geom_alignedSeq(seqs_dna['MA0013.1'], seq_names=names) seqs.bg_data['x'] = seqs.bg_data['x']+3333 seqs.letter_data['x'] = seqs.letter_data['x']+3333 ggplot() + seqs + theme_seq()","title":"Modify the starting position"},{"location":"#used-concurrently-with-other-functions-of-plotnine","text":"Because plotnineSeqSuite is an extension of plotnine, functions of plotnine can be used without obstacles. Here is an example of drawing rectangles, lines and text. from plotnine.geoms import annotate ggplot() + geom_alignedSeq(seqs_dna['MA0013.1']) + annotate('rect', xmin=0.5, xmax=3.5, ymin=-0.05, ymax=6.1,alpha=.1, color='black') + theme_seq() ggplot() + geom_seqBar(seqs_dna['MA0013.1']) + annotate('segment', x=1.5, xend=2.5, y=0, yend=0, size=2, color='red') + annotate('segment', x=4.5, xend=7.5, y=0, yend=0, size=2, color='red') + annotate('segment', x=8.5, xend=11.5, y=0, yend=0,size=2, color='red') + annotate('text', x=6, y=-0.2,label='A is the most', color='red') + theme_seq()","title":"Used concurrently with other functions of plotnine."},{"location":"col_schemes/","text":"color schemes Default color schemes: chemistry, chemistry2, hydrophobicity, nucleotide, nucleotide2, base_pairing, clustalx, taylor. function make_col_scheme(name: str = 'Custom Scheme', chars: Optional[list[str]] = None, groups: Optional[list[int]] = None, cols: Optional[list[int]] = None, values: Optional[list[int]] = None) -> dict from plotnineseqsuite.col_schemes import make_col_scheme cs1 = make_col_scheme(chars=['A', 'T', 'C', 'G'], groups=['gr1', 'gr1', 'gr2', 'gr2'],cols=['purple', 'purple', 'blue', 'blue']) cs2 = make_col_scheme(chars=['A', 'T', 'C', 'G'], values=[1,2,3,4]) The function is used to create custom color style themes. name Name of custom scheme. It will display in legend. chars Letters will used to plot. groups Used in a custom discrete color scheme. It groups letters. cols Used in a custom discrete color scheme. It represents the RGB value of the grouped color. values Used in a custom continuous color scheme. It represents the numeric value of the corresponding letter. function get_col_scheme(col_scheme: str, seq_type: str = 'AUTO') -> dict This function is used to get the built-in color theme of the type of the given sequence. from plotnineseqsuite.col_schemes import get_col_scheme col_df = get_col_scheme(col_scheme='chemistry') col_scheme One of the default color schemes. seq_type AA or DNA or RNA","title":"color schemes"},{"location":"col_schemes/#color-schemes","text":"Default color schemes: chemistry, chemistry2, hydrophobicity, nucleotide, nucleotide2, base_pairing, clustalx, taylor.","title":"color schemes"},{"location":"col_schemes/#function-make_col_schemename-str-custom-scheme-chars-optionalliststr-none-groups-optionallistint-none-cols-optionallistint-none-values-optionallistint-none-dict","text":"from plotnineseqsuite.col_schemes import make_col_scheme cs1 = make_col_scheme(chars=['A', 'T', 'C', 'G'], groups=['gr1', 'gr1', 'gr2', 'gr2'],cols=['purple', 'purple', 'blue', 'blue']) cs2 = make_col_scheme(chars=['A', 'T', 'C', 'G'], values=[1,2,3,4]) The function is used to create custom color style themes.","title":"function make_col_scheme(name: str = 'Custom Scheme', chars: Optional[list[str]] = None, groups: Optional[list[int]] = None, cols: Optional[list[int]] = None, values: Optional[list[int]] = None) -&gt; dict"},{"location":"col_schemes/#name","text":"Name of custom scheme. It will display in legend.","title":"name"},{"location":"col_schemes/#chars","text":"Letters will used to plot.","title":"chars"},{"location":"col_schemes/#groups","text":"Used in a custom discrete color scheme. It groups letters.","title":"groups"},{"location":"col_schemes/#cols","text":"Used in a custom discrete color scheme. It represents the RGB value of the grouped color.","title":"cols"},{"location":"col_schemes/#values","text":"Used in a custom continuous color scheme. It represents the numeric value of the corresponding letter.","title":"values"},{"location":"col_schemes/#function-get_col_schemecol_scheme-str-seq_type-str-auto-dict","text":"This function is used to get the built-in color theme of the type of the given sequence. from plotnineseqsuite.col_schemes import get_col_scheme col_df = get_col_scheme(col_scheme='chemistry')","title":"function get_col_scheme(col_scheme: str, seq_type: str = 'AUTO') -&gt; dict"},{"location":"col_schemes/#col_scheme","text":"One of the default color schemes.","title":"col_scheme"},{"location":"col_schemes/#seq_type","text":"AA or DNA or RNA","title":"seq_type"},{"location":"font/","text":"font Default fonts: times_new_roman, arial, courier_new, akrobat_bold, xkcd_regular, akrobat_regular, helvetica_bold, helvetica_light, helvetica_regular, roboto_bold, roboto_medium, roboto_regular, roboto_slab_bold, roboto_slab_light, roboto_slab_regular. function list_fonts() Get all fonts. function get_font(font_name: str) -> DataFrame from plotnineseqsuite import get_font f_df = get_font(font_name='times_new_roman') Gets the specified font. font_name Name of one of the default fonts.","title":"font"},{"location":"font/#font","text":"Default fonts: times_new_roman, arial, courier_new, akrobat_bold, xkcd_regular, akrobat_regular, helvetica_bold, helvetica_light, helvetica_regular, roboto_bold, roboto_medium, roboto_regular, roboto_slab_bold, roboto_slab_light, roboto_slab_regular.","title":"font"},{"location":"font/#function-list_fonts","text":"Get all fonts.","title":"function list_fonts()"},{"location":"font/#function-get_fontfont_name-str-dataframe","text":"from plotnineseqsuite import get_font f_df = get_font(font_name='times_new_roman') Gets the specified font.","title":"function get_font(font_name: str) -&gt; DataFrame"},{"location":"font/#font_name","text":"Name of one of the default fonts.","title":"font_name"},{"location":"geom_alignedSeq/","text":"geom_alignedSeq A class that represents the sequence alignment diagram Sample code from plotnine import ggplot, coord_fixed from plotnineseqsuite import geom_alignedSeq, theme_seq from plotnineseqsuite.data import seqs_dna ggplot() + geom_alignedSeq(seqs_dna['MA0013.1']) + theme_seq() + coord_fixed() Init param geom_alignedSeq(self, data: list[str] | dict | None = None, seq_names: list[str] | None = None, seq_type: str = 'AUTO', namespace: list[str] | None = None, font: str = 'roboto_medium', stack_width: float = 0.75, border_col: str = 'grey', scheme_applied: str = 'BACKGROUND', no_scheme_col: str = '#000000', col_scheme: DataFrame | str = 'AUTO', low_col: str = 'black', high_col: str = 'yellow', na_col: str = '#333333', **kwargs: Any) -> Any data Sequence data or corresponding dict. seq_names The name corresponding to the sequence data. seq_type OTHER, AA, DNA, RNA namespace The letter corresponding to the data. font Font value stack_width The ratio of the size of letters to the standard unit width. border_col The color of the border in the background. When it is None, the border of the background will disappear. scheme_applied BACKGROUND or LETTER. Indicates the target to which the color scheme applies. no_scheme_col When a color scheme is applied to the background, this indicates the color of the letters. When a color scheme is applied to letters, this indicates the color of the background. col_scheme Color scheme. low_col Continuous color schemes are available. high_col Continuous color schemes are available. na_col It is available when the corresponding namespace do not have a color matching value defined. kwargs Other arguments passed on to layer(). properties bg_data DataFrame. letter_data DataFrame. scale_x_continuous A custom scale_x_continuous. scale_y_continuous A custom scale_y_continuous. xlab A custom xlab. ylab A custom ylab. colscale_opts A custom scale_fill_gradient or custom scale_fill_manual.","title":"geom_alignedSeq"},{"location":"geom_alignedSeq/#geom_alignedseq","text":"A class that represents the sequence alignment diagram","title":"geom_alignedSeq"},{"location":"geom_alignedSeq/#sample-code","text":"from plotnine import ggplot, coord_fixed from plotnineseqsuite import geom_alignedSeq, theme_seq from plotnineseqsuite.data import seqs_dna ggplot() + geom_alignedSeq(seqs_dna['MA0013.1']) + theme_seq() + coord_fixed()","title":"Sample code"},{"location":"geom_alignedSeq/#init-param","text":"geom_alignedSeq(self, data: list[str] | dict | None = None, seq_names: list[str] | None = None, seq_type: str = 'AUTO', namespace: list[str] | None = None, font: str = 'roboto_medium', stack_width: float = 0.75, border_col: str = 'grey', scheme_applied: str = 'BACKGROUND', no_scheme_col: str = '#000000', col_scheme: DataFrame | str = 'AUTO', low_col: str = 'black', high_col: str = 'yellow', na_col: str = '#333333', **kwargs: Any) -> Any data Sequence data or corresponding dict. seq_names The name corresponding to the sequence data. seq_type OTHER, AA, DNA, RNA namespace The letter corresponding to the data. font Font value stack_width The ratio of the size of letters to the standard unit width. border_col The color of the border in the background. When it is None, the border of the background will disappear. scheme_applied BACKGROUND or LETTER. Indicates the target to which the color scheme applies. no_scheme_col When a color scheme is applied to the background, this indicates the color of the letters. When a color scheme is applied to letters, this indicates the color of the background. col_scheme Color scheme. low_col Continuous color schemes are available. high_col Continuous color schemes are available. na_col It is available when the corresponding namespace do not have a color matching value defined. kwargs Other arguments passed on to layer().","title":"Init param"},{"location":"geom_alignedSeq/#properties","text":"bg_data DataFrame. letter_data DataFrame. scale_x_continuous A custom scale_x_continuous. scale_y_continuous A custom scale_y_continuous. xlab A custom xlab. ylab A custom ylab. colscale_opts A custom scale_fill_gradient or custom scale_fill_manual.","title":"properties"},{"location":"geom_logo/","text":"geom_logo A class that represents the sequence logo Sample code from plotnine import ggplot from plotnineseqsuite import geom_logo, theme_seq from plotnineseqsuite.data import seqs_dna ggplot() + geom_logo(seqs_dna['MA0001.1']) + theme_seq() Init param geom_logo(self, data: list[str] | ndarray | dict | None = None, method: str = 'bits', seq_type: str = 'AUTO', namespace: list[str] | None = None, font: str = 'roboto_medium', stack_width: float = 0.95, rev_stack_order: bool = False, col_scheme: DataFrame | str = 'AUTO', low_col: str = 'black', high_col: str = 'yellow', na_col: str = '#333333', **kwargs: Any) -> Any data Sequence data or PFM or corresponding dict. method bits, probability, custom seq_type OTHER, AA, DNA, RNA namespace The letter corresponding to the data. If the type of data is ndarray, the order of the namespaces must correspond to that of ndarray. font Font value stack_width The ratio of the size of letters to the standard unit width. rev_stack_order Order of letter stack is reversed. col_scheme Color scheme of the letters. low_col Continuous color schemes are available. high_col Continuous color schemes are available. na_col Used when the letters in the corresponding namespace do not have a color matching value defined. kwargs Other arguments passed on to layer(). properties data DataFrame. scale_x_continuous A custom scale_x_continuous. xlab A custom xlab. ylab A custom ylab. colscale_opts A custom scale_fill_gradient or custom scale_fill_manual.y","title":"geom_logo"},{"location":"geom_logo/#geom_logo","text":"A class that represents the sequence logo","title":"geom_logo"},{"location":"geom_logo/#sample-code","text":"from plotnine import ggplot from plotnineseqsuite import geom_logo, theme_seq from plotnineseqsuite.data import seqs_dna ggplot() + geom_logo(seqs_dna['MA0001.1']) + theme_seq()","title":"Sample code"},{"location":"geom_logo/#init-param","text":"geom_logo(self, data: list[str] | ndarray | dict | None = None, method: str = 'bits', seq_type: str = 'AUTO', namespace: list[str] | None = None, font: str = 'roboto_medium', stack_width: float = 0.95, rev_stack_order: bool = False, col_scheme: DataFrame | str = 'AUTO', low_col: str = 'black', high_col: str = 'yellow', na_col: str = '#333333', **kwargs: Any) -> Any data Sequence data or PFM or corresponding dict. method bits, probability, custom seq_type OTHER, AA, DNA, RNA namespace The letter corresponding to the data. If the type of data is ndarray, the order of the namespaces must correspond to that of ndarray. font Font value stack_width The ratio of the size of letters to the standard unit width. rev_stack_order Order of letter stack is reversed. col_scheme Color scheme of the letters. low_col Continuous color schemes are available. high_col Continuous color schemes are available. na_col Used when the letters in the corresponding namespace do not have a color matching value defined. kwargs Other arguments passed on to layer().","title":"Init param"},{"location":"geom_logo/#properties","text":"data DataFrame. scale_x_continuous A custom scale_x_continuous. xlab A custom xlab. ylab A custom ylab. colscale_opts A custom scale_fill_gradient or custom scale_fill_manual.y","title":"properties"},{"location":"geom_seqBar/","text":"geom_seqBar A class that represents the sequence histogram Sample code from plotnine import ggplot from plotnineseqsuite import geom_seqBar, theme_seq from plotnineseqsuite.data import seqs_dna ggplot() + geom_seqBar(seqs_dna['MA0013.1']) + theme_seq() Init param geom_seqBar(self, data: list[str] | ndarray | dict | None = None, seq_type: str = 'AUTO', namespace: list[str] | None = None, font: str = 'roboto_medium', stack_width: float = 0.75, bar_col_scheme: DataFrame | str = 'AUTO', font_col: str = '#808080', low_col: str = 'black', high_col: str = 'yellow', na_col: str = '#333333', **kwargs: Any) -> Any data Sequence data or PFM or corresponding dict. seq_type OTHER, AA, DNA, RNA namespace The letter corresponding to the data. If the type of data is ndarray, the order of the namespaces must correspond to that of ndarray. font Font value stack_width The ratio of the size of letters and the width of bars to the standard unit width. bar_col_scheme Color scheme of the cylinder. font_col The color of the font. low_col Continuous color schemes are available. high_col Continuous color schemes are available. na_col Used when the letters in the corresponding namespace do not have a color matching value defined. kwargs Other arguments passed on to layer(). properties bar_data DataFrame. letter_data DataFrame. scale_x_continuous A custom scale_x_continuous. scale_y_continuous A custom scale_y_continuous. xlab A custom xlab. ylab A custom ylab. colscale_opts A custom scale_fill_gradient or custom scale_fill_manual.","title":"geom_seqBar"},{"location":"geom_seqBar/#geom_seqbar","text":"A class that represents the sequence histogram","title":"geom_seqBar"},{"location":"geom_seqBar/#sample-code","text":"from plotnine import ggplot from plotnineseqsuite import geom_seqBar, theme_seq from plotnineseqsuite.data import seqs_dna ggplot() + geom_seqBar(seqs_dna['MA0013.1']) + theme_seq()","title":"Sample code"},{"location":"geom_seqBar/#init-param","text":"geom_seqBar(self, data: list[str] | ndarray | dict | None = None, seq_type: str = 'AUTO', namespace: list[str] | None = None, font: str = 'roboto_medium', stack_width: float = 0.75, bar_col_scheme: DataFrame | str = 'AUTO', font_col: str = '#808080', low_col: str = 'black', high_col: str = 'yellow', na_col: str = '#333333', **kwargs: Any) -> Any data Sequence data or PFM or corresponding dict. seq_type OTHER, AA, DNA, RNA namespace The letter corresponding to the data. If the type of data is ndarray, the order of the namespaces must correspond to that of ndarray. font Font value stack_width The ratio of the size of letters and the width of bars to the standard unit width. bar_col_scheme Color scheme of the cylinder. font_col The color of the font. low_col Continuous color schemes are available. high_col Continuous color schemes are available. na_col Used when the letters in the corresponding namespace do not have a color matching value defined. kwargs Other arguments passed on to layer().","title":"Init param"},{"location":"geom_seqBar/#properties","text":"bar_data DataFrame. letter_data DataFrame. scale_x_continuous A custom scale_x_continuous. scale_y_continuous A custom scale_y_continuous. xlab A custom xlab. ylab A custom ylab. colscale_opts A custom scale_fill_gradient or custom scale_fill_manual.","title":"properties"},{"location":"theme/","text":"theme theme_seq A class represents default theme. Plain white background.","title":"theme"},{"location":"theme/#theme","text":"","title":"theme"},{"location":"theme/#theme_seq","text":"A class represents default theme. Plain white background.","title":"theme_seq"}]}